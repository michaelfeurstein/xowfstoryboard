set :debug 1
set :autoname 1
set :wf_notation 0

#
# TODO: pass wf_notation parameter into storyboard.wf
#
Action initialize -proc activate {obj} {
	set :wf_notation [::xo::cc query_parameter wf_notation]
	ns_log notice "storyboard.wf --> wf_notation:${:wf_notation}"

	set container [[$obj wf_context] wf_container]
    $container set_notation $obj ${:wf_notation}

    set name [$obj name]
    if {[$obj is_new_entry $name]} {
        $obj title "Fresh '${:wf_notation}' storyboard ($name)"
    }
}

Action save \
	-label {save draft} \
	-title {Save Draft}

#Action submit \
#	-next_state submitted \
#	-label {submit} \
#	-title {Submit}

#Action unsubmit \
#	-next_state initial \
#	-label {unsubmit} \
#	-title {Unsubmit}

Action finish \
	-next_state finished \
	-label {finish} \
	-title {Finished}

State parameter { {form en:storyboard.form} {view_method edit} }

State initial -actions {save finish} -form_constraints {
   editor:monaco_storyboard,required,validator=storyboard,notation=natural-language
}

#
# State using a different form (trying things out)
#
#State submitted -actions {unsubmit finish} -form en:storyboard_test.form -form_constraints {
#   _name:text,disabled=true
#   editor:monaco_storyboard,disabled=true
#   preview:text,label=ThisPreview
#}

State finished -view_method view -form_constraints {
   _name:text,disabled=true
   editor:monaco_storyboard,disabled=true,notation=natural-language
}

#
# TODO: pass wf_notation as parameter to storyboard.wf
# couldn't get this working
# I think I need a formloader ?
# The parameter passed via storyboard.wf?wf_notation is not passed through to form
# It is however there in log via: --WF Instance attributes: {wf_notation key-value}
#
:proc set_notation {obj notation} {
	ns_log notice "set_notation --> notation:$notation"
    $obj set_property -new 1 wf_notation $notation
}
